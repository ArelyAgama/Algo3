Preguntas
Abstracción de los tests 01 y 02
En los test 01 y 02 hay código repetido. Cuando lo extrajeron crearon algo nuevo. Eso es algo que estaba en la realidad y no estaba representado en nuestro código, por eso teníamos código repetido. ¿Cuál es esa entidad de la realidad que crearon?

Creamos 2 mensajes, uno para calcular el tiempo de ejecución y otro para corroborar que ese tiempo fuera menor a un tiempo dado. En base a la medición del tiempo que tardaba en ejecutarse, vimos que había una porción de código que se repetía ejecutando un mensaje y obteniendo los tiempos previos y posteriores a dicha ejecución: de esta manera vimos que podíamos abstraer un cronómetro que se encargara de hacer ello mismo, recibiendo un closure con el respectivo código a ejecutar y cronometrar esa ejecución. Si bien este cronómetro no está representado como una clase, porque lo creímos innecesario, sí modela y toma la responsabilidad de uno. Como explicamos en respuestas posteriores, la abstracción que generamos en base a modelar una entidad de la realidad nos permitió otorgar esa responsabilidad, que de otra forma estaba mal otorgada al test, y en base a eso eliminar código repetido: no fue nuestro objetivo principal eliminarlo en base a reglas sino que pudimos generar un ente que tuviera esa responsabilidad y consecuentemente se eliminó dicha repetición de código.

Cómo representar en Smalltalk
¿Cuáles son las formas en que podemos representar entes de la realidad en Smalltalk que conocés? Es decir, ¿qué cosas del lenguaje Smalltalk puedo usar para representar entidades de la realidad?

En base al paradigma que elegimos adoptar en estas últimas clases y que utilizamos para resolver el ejercicio actual, vemos que Smalltalk nos facilita la abstracción de entidades en la realidad ya sea en forma de clases, dándonos un objeto que modela una generalización de lo que vemos (en el ejemplo de clase podíamos ver cómo abstraíamos el concepto de silla) y luego podemos tener instancias de lo mismo que nos faciliten especificar sus características (siguiendo con el ejemplo de la silla, una instancia de la misma podría dar un color específico, material, etc).


Teoría de Naur
¿Qué relación hay entre sacar código repetido (creando abstracciones) y la teoría del modelo/sistema (del paper de Naur)?

Modelando objetos generamos abstracciones que nos permiten describir lo mejor posible entidades de la realidad y sus responsabilidades. Estas responsabilidades son las que se encargan de modelar el comportamiento de las cosas y nos permiten interactuar con ellas para obtener las funcionalidades deseadas. Al hacer esto no estamos buscando eliminar código repetido en base a seguir reglas ni métodos impuestos para la programación, como desestima el paper leído, sino que buscamos generar conocimiento de manera que cada objeto se comporte como debería. Viéndolo de esta manera el concepto de código repetido no debería existir si la abstracción de la realidad reparte las responsabilidades de manera consciente, sensata y consecuente al conocimiento generado en base a entes de la realidad.
